datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}
 
generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["driverAdapters"]
}
 
enum UserRole {
  ADMIN
  USER
}
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole        @default(USER)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]          // Relation to the Post model
  comments      Comment[]       // Relation to the Comment model
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Post {
  id          String    @id @default(cuid())
  title       String
  description String
  content     String?
  thumbnail   String
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  authorId    String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  comments    Comment[] // Relation to the Comment model
  rawData     String?
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  postId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  parentId  String?   // Foreign key for the parent comment (nullable for top-level comments)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies") // Relation to replies (self-referencing)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id             String  @id @default(cuid())
  categorySlug  String  @unique
  categoryName  String
  description String?
  posts          Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String @id @default(cuid())
  email String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}


model ResetPasswordToken {
  id         String @id @default(cuid())
  email String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}





